// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Function$Rationale = require("rationale/src/Function.js");

console.log("\n\n--------------------------------------------------------------------");

console.log("Hello, BuckleScript and Reason!");

var greeting = "foo";

console.log("Hello " + (String(greeting) + " from `console.log` using string templates"));

function log(prim) {
  console.log(prim);
  return /* () */0;
}

Pervasives.print_string("Hello, using OCaml `print_string`!\n");

function doubleInt(x) {
  return (x << 1);
}

function doubleFloat(x) {
  return x * 2;
}

console.log(16);

function doubleString(param) {
  return Function$Rationale.$less$pipe$pipe((function (param) {
                return Function$Rationale.$less$pipe$pipe((function (prim) {
                              return String(prim);
                            }), doubleInt, param);
              }), Caml_format.caml_int_of_string, param);
}

Function$Rationale.$less$pipe$pipe((function (prim) {
        console.log(prim);
        return /* () */0;
      }), doubleString, "5");

function coinToString(x) {
  switch (x) {
    case 0 : 
        return "`x` was BTC";
    case 1 : 
        return "`x` was ETH";
    case 2 : 
        return "`x` was LTC";
    
  }
}

console.log(coinToString(/* BTC */0));

function eitherToString(data) {
  if (data.tag) {
    var x = data[0];
    if (x !== 0) {
      return "Right(" + (String(x) + (", " + (String(data[1]) + ")")));
    } else {
      return "Right where the first was 0";
    }
  } else {
    return "Left(" + (String(data[0]) + ")");
  }
}

function eitherToStringLog(param) {
  return Function$Rationale.$less$pipe$pipe((function (prim) {
                console.log(prim);
                return /* () */0;
              }), eitherToString, param);
}

eitherToStringLog(/* Left */Block.__(0, ["Danger Will Robinson"]));

eitherToStringLog(/* Right */Block.__(1, [
        0,
        7
      ]));

eitherToStringLog(/* Right */Block.__(1, [
        52,
        104
      ]));

var rob = /* record */[
  /* name */"Rob",
  /* age */31
];

var ally = /* record */[
  /* name */"Ally",
  /* age */30
];

function getPersonInfo(data) {
  var exit = 0;
  switch (data[/* name */0]) {
    case "Ally" : 
    case "Rob" : 
        exit = 1;
        break;
    default:
      return "Some other person with the name: \"" + (data[/* name */0] + ("\" is " + (String(data[/* age */1]) + " years old.")));
  }
  if (exit === 1) {
    return "\"" + (String(data[/* name */0]) + ("\" is " + (String(data[/* age */1]) + " years old")));
  }
  
}

var prim = getPersonInfo(rob);

console.log(prim);

var prim$1 = getPersonInfo(ally);

console.log(prim$1);

var prim$2 = getPersonInfo(/* record */[
      /* name */"Jerry",
      /* age */82
    ]);

console.log(prim$2);

var btc = /* BTC */0;

var eth = /* ETH */1;

var ltc = /* LTC */2;

exports.greeting = greeting;
exports.log = log;
exports.doubleInt = doubleInt;
exports.doubleFloat = doubleFloat;
exports.doubleString = doubleString;
exports.btc = btc;
exports.eth = eth;
exports.ltc = ltc;
exports.coinToString = coinToString;
exports.eitherToString = eitherToString;
exports.eitherToStringLog = eitherToStringLog;
exports.rob = rob;
exports.ally = ally;
exports.getPersonInfo = getPersonInfo;
/*  Not a pure module */
